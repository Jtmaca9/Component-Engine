{"id":"../node_modules/regjsparser/parser.js","dependencies":[{"name":"/Users/t826493/Documents/Jareth/component-engine/component-engine/package.json","includedInParent":true,"mtime":1560917886444},{"name":"/Users/t826493/Documents/Jareth/component-engine/component-engine/node_modules/regjsparser/package.json","includedInParent":true,"mtime":1560811101748}],"generated":{"js":"// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//      ( ? < = Disjunction )\n//      ( ? < ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( GroupSpecifier Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//      k GroupName\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not c\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// GroupSpecifier ::\n//      [empty]\n//      ? GroupName\n//\n// GroupName ::\n//      < RegExpIdentifierName >\n//\n// RegExpIdentifierName ::\n//      RegExpIdentifierStart\n//      RegExpIdentifierName RegExpIdentifierContinue\n//\n// RegExpIdentifierStart ::\n//      UnicodeIDStart\n//      $\n//      _\n//      \\ RegExpUnicodeEscapeSequence\n//\n// RegExpIdentifierContinue ::\n//      UnicodeIDContinue\n//      $\n//      _\n//      \\ RegExpUnicodeEscapeSequence\n//      <ZWNJ>\n//      <ZWJ>\n\n(function() {\n\n  var fromCodePoint = String.fromCodePoint || (function() {\n    // Implementation taken from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n\n    return function fromCodePoint() {\n      var MAX_SIZE = 0x4000;\n      var codeUnits = [];\n      var highSurrogate;\n      var lowSurrogate;\n      var index = -1;\n      var length = arguments.length;\n      if (!length) {\n        return '';\n      }\n      var result = '';\n      while (++index < length) {\n        var codePoint = Number(arguments[index]);\n        if (\n          !isFinite(codePoint) ||       // `NaN`, `+Infinity`, or `-Infinity`\n          codePoint < 0 ||              // not a valid Unicode code point\n          codePoint > 0x10FFFF ||       // not a valid Unicode code point\n          floor(codePoint) != codePoint // not an integer\n        ) {\n          throw RangeError('Invalid code point: ' + codePoint);\n        }\n        if (codePoint <= 0xFFFF) { // BMP code point\n          codeUnits.push(codePoint);\n        } else { // Astral code point; split in surrogate halves\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          codePoint -= 0x10000;\n          highSurrogate = (codePoint >> 10) + 0xD800;\n          lowSurrogate = (codePoint % 0x400) + 0xDC00;\n          codeUnits.push(highSurrogate, lowSurrogate);\n        }\n        if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n          result += stringFromCharCode.apply(null, codeUnits);\n          codeUnits.length = 0;\n        }\n      }\n      return result;\n    };\n  }());\n\n  function parse(str, flags, features) {\n    if (!features) {\n      features = {};\n    }\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [\n          pos - rawLength,\n          pos\n        ]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n      var first = _char.charCodeAt(0);\n      if (hasUnicodeFlag) {\n        var second;\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue(\n                'symbol',\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                pos - 2, pos);\n          }\n        }\n      }\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [\n          pos - 1,\n          pos\n        ]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [\n          pos - 2,\n          pos\n        ]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [\n          pos - 1 - matchIndex.length,\n          pos\n        ]\n      });\n    }\n\n    function createNamedReference(name) {\n      return addRaw({\n        type: 'reference',\n        name: name,\n        range: [\n          name.range[0] - 3,\n          pos\n        ]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null, // set later on\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = (amount || 1);\n      var res = str.substring(pos, pos + amount);\n      pos += (amount || 1);\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [], from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [], from = pos;\n      var term;\n\n      // Alternative ::\n      //      [empty]\n      //      Alternative Term\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n\n      if (pos >= str.length || current('|') || current(')')) {\n        return null; /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtom();\n      if (!atom) {\n        bail('Expected atom');\n      }\n      var quantifier = parseQuantifier() || false;\n      if (quantifier) {\n        quantifier.body = flattenBody(atom);\n        // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null, from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      return finishGroup(type, from);\n    }\n\n    function finishGroup(type, from) {\n      var body = parseDisjunction();\n      if (!body) {\n        bail('Expected disjunction');\n      }\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res, from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1 /* rawLength */);\n      } else if (match('$')) {\n        return createAnchor('end', 1 /* rawLength */);\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2 /* rawLength */);\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2 /* rawLength */);\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n\n      var res, from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      }\n      else if (match('+')) {\n        quantifier = createQuantifier(1);\n      }\n      else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      }\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtom() {\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( GroupSpecifier Disjunction )\n      //      ( ? : Disjunction )\n\n      var res;\n\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n      // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n      if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      }\n      else if (match('.')) {\n        //      .\n        return createDot();\n      }\n      else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n        if (!res) {\n          if (!hasUnicodeFlag && lookahead() == 'c') {\n            // B.1.4 ExtendedAtom\n            // \\[lookahead = c]\n            return createValue('symbol', 92, pos - 1, pos);\n          }\n          bail('atomEscape');\n        }\n        return res;\n      }\n      else if (res = parseCharacterClass()) {\n        return res;\n      }\n      else if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {\n        return res;\n      }\n      else if (features.namedGroups && match(\"(?<\")) {\n        var name = parseIdentifier();\n        skip(\">\");\n        var group = finishGroup(\"normal\", name.range[0] - 3);\n        group.name = name;\n        return group;\n      }\n      else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n        if (firstEscape.kind == 'unicodeEscape' &&\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n          current('\\\\') && next('u') ) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n          if (secondEscape.kind == 'unicodeEscape' &&\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          }\n          else {\n            pos = prevPos;\n          }\n        }\n      }\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n      //      k GroupName\n\n      var res, from = pos;\n\n      res = parseDecimalEscape() || parseNamedReference();\n      if (res) {\n        return res;\n      }\n\n      // For ClassEscape\n      if (insideCharacterClass) {\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        } else if (!hasUnicodeFlag && (res = matchReg(/^c([0-9])/))) {\n          // B.1.4\n          // c ClassControlLetter\n          return createEscaped('controlLetter', res[1] + 16, res[1], 2);\n        }\n      }\n\n      res = parseCharacterEscape();\n\n      return res;\n    }\n\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx);\n\n          // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n          incr(-res[0].length);\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      }\n      // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length + 1);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n      return false;\n    }\n\n    function parseNamedReference() {\n      if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {\n        var name = parseIdentifier();\n        skip('>');\n        return createNamedReference(name);\n      }\n    }\n\n    function parseRegExpUnicodeEscapeSequence() {\n      var res;\n      if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n        );\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      }\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n\n      var res;\n      var from = pos;\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n        switch (res[0]) {\n          case 't': codePoint = 0x009; break;\n          case 'n': codePoint = 0x00A; break;\n          case 'v': codePoint = 0x00B; break;\n          case 'f': codePoint = 0x00C; break;\n          case 'r': codePoint = 0x00D; break;\n        }\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = parseRegExpUnicodeEscapeSequence()) {\n        if (!res || res.codePoint > 0x10FFFF) {\n          bail('Invalid escape sequence', null, from, pos);\n        }\n        return res;\n      } else if (features.unicodePropertyEscape && hasUnicodeFlag && (res = matchReg(/^([pP])\\{([^\\}]+)\\}/))) {\n        // https://github.com/jviereck/regjsparser/issues/77\n        return addRaw({\n          type: 'unicodePropertyEscape',\n          negative: res[1] === 'P',\n          value: res[2],\n          range: [res.range[0] - 1, res.range[1]],\n          raw: res[0]\n        });\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    function parseIdentifierAtom(check) {\n      var ch = lookahead();\n      var from = pos;\n      if (ch === '\\\\') {\n        incr();\n        var esc = parseRegExpUnicodeEscapeSequence();\n        if (!esc || !check(esc.codePoint)) {\n          bail('Invalid escape sequence', null, from, pos);\n        }\n        return fromCodePoint(esc.codePoint);\n      }\n      var code = ch.charCodeAt(0);\n      if (code >= 0xD800 && code <= 0xDBFF) {\n        ch += str[pos + 1];\n        var second = ch.charCodeAt(1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n          // Unicode surrogate pair\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n      }\n      if (!check(code)) return;\n      incr();\n      if (code > 0xFFFF) incr();\n      return ch;\n    }\n\n    function parseIdentifier() {\n      // RegExpIdentifierName ::\n      //      RegExpIdentifierStart\n      //      RegExpIdentifierName RegExpIdentifierContinue\n      //\n      // RegExpIdentifierStart ::\n      //      UnicodeIDStart\n      //      $\n      //      _\n      //      \\ RegExpUnicodeEscapeSequence\n      //\n      // RegExpIdentifierContinue ::\n      //      UnicodeIDContinue\n      //      $\n      //      _\n      //      \\ RegExpUnicodeEscapeSequence\n      //      <ZWNJ>\n      //      <ZWJ>\n\n      var start = pos;\n      var res = parseIdentifierAtom(isIdentifierStart);\n      if (!res) {\n        bail('Invalid identifier');\n      }\n\n      var ch;\n      while (ch = parseIdentifierAtom(isIdentifierPart)) {\n        res += ch;\n      }\n\n      return addRaw({\n        type: 'identifier',\n        value: res,\n        range: [start, pos]\n      });\n    }\n\n    function isIdentifierStart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierStart = /[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n        (ch >= 65 && ch <= 90) ||         // A..Z\n        (ch >= 97 && ch <= 122) ||        // a..z\n        ((ch >= 0x80) && NonAsciiIdentifierStart.test(fromCodePoint(ch)));\n    }\n\n    // Taken from the Esprima parser.\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPartOnly = /[0-9_\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u200D\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDD30-\\uDD39\\uDF46-\\uDF50]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDCF0-\\uDCF9\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD36-\\uDD3F\\uDD45\\uDD46\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDC9-\\uDDCC\\uDDD0-\\uDDD9\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF3B\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDC50-\\uDC59\\uDC5E\\uDCB0-\\uDCC3\\uDCD0-\\uDCD9\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDE50-\\uDE59\\uDEAB-\\uDEB7\\uDEC0-\\uDEC9\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC2C-\\uDC3A\\uDCE0-\\uDCE9\\uDE01-\\uDE0A\\uDE33-\\uDE39\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE5B\\uDE8A-\\uDE99]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC50-\\uDC59\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD50-\\uDD59\\uDD8A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD97\\uDDA0-\\uDDA9\\uDEF3-\\uDEF6]|\\uD81A[\\uDE60-\\uDE69\\uDEF0-\\uDEF4\\uDF30-\\uDF36\\uDF50-\\uDF59]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A\\uDD50-\\uDD59]|\\uDB40[\\uDD00-\\uDDEF]/;\n\n      return isIdentifierStart(ch) ||\n        (ch >= 48 && ch <= 57) ||         // 0..9\n        ((ch >= 0x80) && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch)));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      SourceCharacter but not c\n\n      var tmp;\n\n      if (lookahead() !== 'c') {\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n\n      var res, from = pos;\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n\n      var res;\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res;\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        skip('-');\n\n        res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        to = pos;\n        var classRanges = parseClassRanges();\n        if (!classRanges) {\n          bail('classRanges');\n        }\n        from = atom.range[0];\n        if (classRanges.type === 'empty') {\n          return [createClassRange(atom, res, from, to)];\n        }\n        return [createClassRange(atom, res, from, to)].concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n\n      var atom = parseClassAtom();\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      }\n\n      // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n\n      var res = parseClassAtom();\n      if (!res) {\n        bail('classAtom');\n      }\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      }\n\n      // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n\n      var res;\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length);\n\n      // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0;\n\n    // Convert the input to a string and treat the empty string special.\n    str = String(str);\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    }\n\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n\n}());\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/regjsparser/parser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/regjsparser/parser.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}}],"sources":{"../node_modules/regjsparser/parser.js":"// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//      ( ? < = Disjunction )\n//      ( ? < ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( GroupSpecifier Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//      k GroupName\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not c\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// GroupSpecifier ::\n//      [empty]\n//      ? GroupName\n//\n// GroupName ::\n//      < RegExpIdentifierName >\n//\n// RegExpIdentifierName ::\n//      RegExpIdentifierStart\n//      RegExpIdentifierName RegExpIdentifierContinue\n//\n// RegExpIdentifierStart ::\n//      UnicodeIDStart\n//      $\n//      _\n//      \\ RegExpUnicodeEscapeSequence\n//\n// RegExpIdentifierContinue ::\n//      UnicodeIDContinue\n//      $\n//      _\n//      \\ RegExpUnicodeEscapeSequence\n//      <ZWNJ>\n//      <ZWJ>\n\n(function() {\n\n  var fromCodePoint = String.fromCodePoint || (function() {\n    // Implementation taken from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n\n    return function fromCodePoint() {\n      var MAX_SIZE = 0x4000;\n      var codeUnits = [];\n      var highSurrogate;\n      var lowSurrogate;\n      var index = -1;\n      var length = arguments.length;\n      if (!length) {\n        return '';\n      }\n      var result = '';\n      while (++index < length) {\n        var codePoint = Number(arguments[index]);\n        if (\n          !isFinite(codePoint) ||       // `NaN`, `+Infinity`, or `-Infinity`\n          codePoint < 0 ||              // not a valid Unicode code point\n          codePoint > 0x10FFFF ||       // not a valid Unicode code point\n          floor(codePoint) != codePoint // not an integer\n        ) {\n          throw RangeError('Invalid code point: ' + codePoint);\n        }\n        if (codePoint <= 0xFFFF) { // BMP code point\n          codeUnits.push(codePoint);\n        } else { // Astral code point; split in surrogate halves\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          codePoint -= 0x10000;\n          highSurrogate = (codePoint >> 10) + 0xD800;\n          lowSurrogate = (codePoint % 0x400) + 0xDC00;\n          codeUnits.push(highSurrogate, lowSurrogate);\n        }\n        if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n          result += stringFromCharCode.apply(null, codeUnits);\n          codeUnits.length = 0;\n        }\n      }\n      return result;\n    };\n  }());\n\n  function parse(str, flags, features) {\n    if (!features) {\n      features = {};\n    }\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [\n          pos - rawLength,\n          pos\n        ]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n      var first = _char.charCodeAt(0);\n      if (hasUnicodeFlag) {\n        var second;\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue(\n                'symbol',\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                pos - 2, pos);\n          }\n        }\n      }\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [\n          pos - 1,\n          pos\n        ]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [\n          pos - 2,\n          pos\n        ]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [\n          pos - 1 - matchIndex.length,\n          pos\n        ]\n      });\n    }\n\n    function createNamedReference(name) {\n      return addRaw({\n        type: 'reference',\n        name: name,\n        range: [\n          name.range[0] - 3,\n          pos\n        ]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null, // set later on\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = (amount || 1);\n      var res = str.substring(pos, pos + amount);\n      pos += (amount || 1);\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [], from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [], from = pos;\n      var term;\n\n      // Alternative ::\n      //      [empty]\n      //      Alternative Term\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n\n      if (pos >= str.length || current('|') || current(')')) {\n        return null; /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtom();\n      if (!atom) {\n        bail('Expected atom');\n      }\n      var quantifier = parseQuantifier() || false;\n      if (quantifier) {\n        quantifier.body = flattenBody(atom);\n        // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null, from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      return finishGroup(type, from);\n    }\n\n    function finishGroup(type, from) {\n      var body = parseDisjunction();\n      if (!body) {\n        bail('Expected disjunction');\n      }\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res, from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1 /* rawLength */);\n      } else if (match('$')) {\n        return createAnchor('end', 1 /* rawLength */);\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2 /* rawLength */);\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2 /* rawLength */);\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n\n      var res, from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      }\n      else if (match('+')) {\n        quantifier = createQuantifier(1);\n      }\n      else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      }\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtom() {\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( GroupSpecifier Disjunction )\n      //      ( ? : Disjunction )\n\n      var res;\n\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n      // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n      if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      }\n      else if (match('.')) {\n        //      .\n        return createDot();\n      }\n      else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n        if (!res) {\n          if (!hasUnicodeFlag && lookahead() == 'c') {\n            // B.1.4 ExtendedAtom\n            // \\[lookahead = c]\n            return createValue('symbol', 92, pos - 1, pos);\n          }\n          bail('atomEscape');\n        }\n        return res;\n      }\n      else if (res = parseCharacterClass()) {\n        return res;\n      }\n      else if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {\n        return res;\n      }\n      else if (features.namedGroups && match(\"(?<\")) {\n        var name = parseIdentifier();\n        skip(\">\");\n        var group = finishGroup(\"normal\", name.range[0] - 3);\n        group.name = name;\n        return group;\n      }\n      else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n        if (firstEscape.kind == 'unicodeEscape' &&\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n          current('\\\\') && next('u') ) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n          if (secondEscape.kind == 'unicodeEscape' &&\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          }\n          else {\n            pos = prevPos;\n          }\n        }\n      }\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n      //      k GroupName\n\n      var res, from = pos;\n\n      res = parseDecimalEscape() || parseNamedReference();\n      if (res) {\n        return res;\n      }\n\n      // For ClassEscape\n      if (insideCharacterClass) {\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        } else if (!hasUnicodeFlag && (res = matchReg(/^c([0-9])/))) {\n          // B.1.4\n          // c ClassControlLetter\n          return createEscaped('controlLetter', res[1] + 16, res[1], 2);\n        }\n      }\n\n      res = parseCharacterEscape();\n\n      return res;\n    }\n\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx);\n\n          // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n          incr(-res[0].length);\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      }\n      // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length + 1);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n      return false;\n    }\n\n    function parseNamedReference() {\n      if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {\n        var name = parseIdentifier();\n        skip('>');\n        return createNamedReference(name);\n      }\n    }\n\n    function parseRegExpUnicodeEscapeSequence() {\n      var res;\n      if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n        );\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      }\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n\n      var res;\n      var from = pos;\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n        switch (res[0]) {\n          case 't': codePoint = 0x009; break;\n          case 'n': codePoint = 0x00A; break;\n          case 'v': codePoint = 0x00B; break;\n          case 'f': codePoint = 0x00C; break;\n          case 'r': codePoint = 0x00D; break;\n        }\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = parseRegExpUnicodeEscapeSequence()) {\n        if (!res || res.codePoint > 0x10FFFF) {\n          bail('Invalid escape sequence', null, from, pos);\n        }\n        return res;\n      } else if (features.unicodePropertyEscape && hasUnicodeFlag && (res = matchReg(/^([pP])\\{([^\\}]+)\\}/))) {\n        // https://github.com/jviereck/regjsparser/issues/77\n        return addRaw({\n          type: 'unicodePropertyEscape',\n          negative: res[1] === 'P',\n          value: res[2],\n          range: [res.range[0] - 1, res.range[1]],\n          raw: res[0]\n        });\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    function parseIdentifierAtom(check) {\n      var ch = lookahead();\n      var from = pos;\n      if (ch === '\\\\') {\n        incr();\n        var esc = parseRegExpUnicodeEscapeSequence();\n        if (!esc || !check(esc.codePoint)) {\n          bail('Invalid escape sequence', null, from, pos);\n        }\n        return fromCodePoint(esc.codePoint);\n      }\n      var code = ch.charCodeAt(0);\n      if (code >= 0xD800 && code <= 0xDBFF) {\n        ch += str[pos + 1];\n        var second = ch.charCodeAt(1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n          // Unicode surrogate pair\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n      }\n      if (!check(code)) return;\n      incr();\n      if (code > 0xFFFF) incr();\n      return ch;\n    }\n\n    function parseIdentifier() {\n      // RegExpIdentifierName ::\n      //      RegExpIdentifierStart\n      //      RegExpIdentifierName RegExpIdentifierContinue\n      //\n      // RegExpIdentifierStart ::\n      //      UnicodeIDStart\n      //      $\n      //      _\n      //      \\ RegExpUnicodeEscapeSequence\n      //\n      // RegExpIdentifierContinue ::\n      //      UnicodeIDContinue\n      //      $\n      //      _\n      //      \\ RegExpUnicodeEscapeSequence\n      //      <ZWNJ>\n      //      <ZWJ>\n\n      var start = pos;\n      var res = parseIdentifierAtom(isIdentifierStart);\n      if (!res) {\n        bail('Invalid identifier');\n      }\n\n      var ch;\n      while (ch = parseIdentifierAtom(isIdentifierPart)) {\n        res += ch;\n      }\n\n      return addRaw({\n        type: 'identifier',\n        value: res,\n        range: [start, pos]\n      });\n    }\n\n    function isIdentifierStart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierStart = /[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n        (ch >= 65 && ch <= 90) ||         // A..Z\n        (ch >= 97 && ch <= 122) ||        // a..z\n        ((ch >= 0x80) && NonAsciiIdentifierStart.test(fromCodePoint(ch)));\n    }\n\n    // Taken from the Esprima parser.\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPartOnly = /[0-9_\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u200D\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDD30-\\uDD39\\uDF46-\\uDF50]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDCF0-\\uDCF9\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD36-\\uDD3F\\uDD45\\uDD46\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDC9-\\uDDCC\\uDDD0-\\uDDD9\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF3B\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDC50-\\uDC59\\uDC5E\\uDCB0-\\uDCC3\\uDCD0-\\uDCD9\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDE50-\\uDE59\\uDEAB-\\uDEB7\\uDEC0-\\uDEC9\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC2C-\\uDC3A\\uDCE0-\\uDCE9\\uDE01-\\uDE0A\\uDE33-\\uDE39\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE5B\\uDE8A-\\uDE99]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC50-\\uDC59\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD50-\\uDD59\\uDD8A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD97\\uDDA0-\\uDDA9\\uDEF3-\\uDEF6]|\\uD81A[\\uDE60-\\uDE69\\uDEF0-\\uDEF4\\uDF30-\\uDF36\\uDF50-\\uDF59]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A\\uDD50-\\uDD59]|\\uDB40[\\uDD00-\\uDDEF]/;\n\n      return isIdentifierStart(ch) ||\n        (ch >= 48 && ch <= 57) ||         // 0..9\n        ((ch >= 0x80) && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch)));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      SourceCharacter but not c\n\n      var tmp;\n\n      if (lookahead() !== 'c') {\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n\n      var res, from = pos;\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n\n      var res;\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res;\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        skip('-');\n\n        res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        to = pos;\n        var classRanges = parseClassRanges();\n        if (!classRanges) {\n          bail('classRanges');\n        }\n        from = atom.range[0];\n        if (classRanges.type === 'empty') {\n          return [createClassRange(atom, res, from, to)];\n        }\n        return [createClassRange(atom, res, from, to)].concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n\n      var atom = parseClassAtom();\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      }\n\n      // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n\n      var res = parseClassAtom();\n      if (!res) {\n        bail('classAtom');\n      }\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      }\n\n      // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n\n      var res;\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length);\n\n      // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0;\n\n    // Convert the input to a string and treat the empty string special.\n    str = String(str);\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    }\n\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n\n}());\n"},"lineCount":1158}},"error":null,"hash":"7657e0f232c349f718d233773e1cfb30","cacheData":{"env":{}}}